// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// npx prisma db push
model user {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  username          String              @unique
  password          String
  avatar            String?
  description       String?
  email             String              @unique
  createtime        DateTime            @default(now()) @db.Timestamp
  collection        collection[]
  blueprint         blueprint[]
  blueprint_comment blueprint_comment[]
}

model email_verify_code {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  email      String   @unique
  code       String
  createtime DateTime @default(now()) @db.Timestamp
}

enum oauth_type {
  discord
}

model oauth {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String     @db.ObjectId
  type       oauth_type
  openid     String
  createtime DateTime   @default(now()) @db.Timestamp

  @@unique([type, openid])
  @@unique([user_id, type])
}

model collection {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  user_id              String                 @db.ObjectId
  user                 user                   @relation(fields: [user_id], references: [id])
  title                String
  description          String?
  parent_id            String?                @db.ObjectId
  public               Int                    @default(1)
  status               Int                    @default(1)
  createtime           DateTime               @default(now()) @db.Timestamp
  updatetime           DateTime               @default(now()) @db.Timestamp
  blueprint_collection blueprint_collection[]
  collection_like      collection_like[]

  @@unique([user_id, title])
  @@index([parent_id])
}

model limit_record {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id    String   @db.ObjectId
  action     String
  param      String
  createtime DateTime @default(now()) @db.Timestamp
}

model blueprint {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  user_id              String                 @db.ObjectId
  user                 user                   @relation(fields: [user_id], references: [id])
  title                String
  description          String?
  tags_id              Int[]
  pic_list             String[]
  blueprint            String
  game_version         String
  buildings            String
  copy_count           Int                    @default(0)
  status               Int                    @default(1)
  createtime           DateTime               @default(now()) @db.Timestamp
  updatetime           DateTime               @default(now()) @db.Timestamp
  blueprint_collection blueprint_collection[]
  blueprint_comment    blueprint_comment[]
  blueprint_like       blueprint_like[]
}

model blueprint_product {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  blueptint_id String   @db.ObjectId
  item_id      Int
  count        Int
  createtime   DateTime @default(now()) @db.Timestamp

  @@index([item_id])
}

model blueprint_collection {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  blueprint_id  String     @db.ObjectId
  blueprint     blueprint  @relation(fields: [blueprint_id], references: [id])
  collection_id String     @db.ObjectId
  collection    collection @relation(fields: [collection_id], references: [id])
  status        Int        @default(1)
  createtime    DateTime   @default(now()) @db.Timestamp
  updatetime    DateTime   @default(now()) @db.Timestamp

  @@index([blueprint_id])
  @@index([collection_id])
}

model collection_like {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  user_id       String     @db.ObjectId
  collection_id String     @db.ObjectId
  collection    collection @relation(fields: [collection_id], references: [id])
  createtime    DateTime   @default(now()) @db.Timestamp

  @@unique([user_id, collection_id])
  @@index([collection_id])
}

model blueprint_like {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id      String    @db.ObjectId
  blueprint_id String    @db.ObjectId
  blueprint    blueprint @relation(fields: [blueprint_id], references: [id])
  createtime   DateTime  @default(now()) @db.Timestamp

  @@unique([user_id, blueprint_id])
  @@index([blueprint_id])
}

// 蓝图评论
model blueprint_comment {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  user_id      String    @db.ObjectId
  user         user      @relation(fields: [user_id], references: [id])
  blueprint_id String    @db.ObjectId
  blueprint    blueprint @relation(fields: [blueprint_id], references: [id])
  content      String
  createtime   DateTime  @default(now()) @db.Timestamp

  @@index([blueprint_id])
}
